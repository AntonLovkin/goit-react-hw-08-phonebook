{"version":3,"sources":["redux/contacts/contacts-actions.js","redux/contacts/contacts-selectors.js","components/Filter.js","redux/contacts/contacts-operations.js","components/Contacts/Contacts-list.js","components/Contact-form/Contact-form.js","App.js","reportWebVitals.js","redux/contacts/contacts-reducer.js","redux/store.js","index.js"],"names":["fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","changeFilter","getFilter","state","contacts","filter","getFilteredContacts","createSelector","items","normalizedFilter","toLowerCase","contact","name","includes","connect","value","contactsSelectors","dispatch","onChange","evt","target","className","type","axios","defaults","baseURL","number","post","then","data","catch","error","id","delete","a","get","filteredContacts","onDeleteContact","contactsOperations","console","log","map","onClick","ContactForm","handleChange","setState","handleSubmit","preventDefault","props","onSubmit","reset","this","fetchContacts","placeholder","pattern","title","required","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","createReducer","_","payload","alert","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","contactsReducer","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0d523d88.chunk.js","sourcesContent":["// import types from \"./contacts-types\";\n// import { v4 as uuidv4 } from \"uuid\";\nimport { createAction } from \"@reduxjs/toolkit\";\n\nexport const fetchContactsRequest = createAction('contacts/fetchContactsRequest');\nexport const fetchContactsSuccess = createAction('contacts/fetchContactsSuccess');\nexport const fetchContactsError = createAction('contacts/fetchContactsError');\n\nexport const addContactRequest = createAction('contacts/addContactRequest');\nexport const addContactSuccess = createAction('contacts/addContactSuccess');\nexport const addContactError = createAction('contacts/addContactError');\n\nexport const deleteContactRequest = createAction('contacts/deleteContactRequest');\nexport const deleteContactSuccess = createAction('contacts/deleteContactSuccess');\nexport const deleteContactError = createAction('contacts/deleteContactError');\n\nexport const changeFilter = createAction(\"contacts/changeFilter\");\n\n// export default {addContactRequest, addContactSuccess, addContactError, deleteContact, changeFilter };","import { createSelector } from \"reselect\";\r\n\r\nconst getFilter = state => state.contacts.filter;\r\n\r\nconst getAllContacts = state => state.contacts.items;\r\n\r\n// const getFilteredContacts = state => {\r\n//     const contacts = getAllContacts(state);\r\n//     const filter = getFilter(state);\r\n//     const normalizedFilter = filter.toLowerCase();\r\n\r\n//     return contacts.filter((contact) =>\r\n//     contact.name.toLowerCase().includes(normalizedFilter)\r\n//   );\r\n// }\r\n\r\nconst getFilteredContacts = createSelector(\r\n    [getAllContacts, getFilter], (contacts, filter) => {\r\n      const normalizedFilter = filter.toLowerCase();\r\n\r\n    return contacts.filter((contact) =>\r\n    contact.name.toLowerCase().includes(normalizedFilter)\r\n  );  \r\n    })\r\n\r\nexport default { getFilter, getFilteredContacts }","import React from \"react\";\nimport { connect } from \"react-redux\";\n// import contactsActions from \"../redux/contacts/contacts-actions\";\nimport {changeFilter} from '../redux/contacts/contacts-actions'\nimport contactsSelectors from '../redux/contacts/contacts-selectors'\n\nconst Filter = ({ value, onChange }) => (\n  <div className=\"filter\">\n    <label className=\"label\">\n      Find contacts by name:\n      <input\n        className=\"input\"\n        type=\"text\"\n        value={value}\n        onChange={onChange}\n      ></input>\n    </label>\n  </div>\n);\n\nconst mapStateToProps = (state) => ({\n  value: contactsSelectors.getFilter(state),\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  onChange: (evt) => dispatch(changeFilter(evt.target.value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import axios from 'axios';\r\nimport {\r\n    addContactRequest,\r\n    addContactSuccess,\r\n    addContactError,\r\n    deleteContactRequest,\r\n    deleteContactSuccess,\r\n    deleteContactError,\r\n    fetchContactsRequest,\r\n    fetchContactsSuccess,\r\n    fetchContactsError\r\n} from './contacts-actions'\r\n\r\naxios.defaults.baseURL = 'http://localhost:4040';\r\n\r\nconst fetchContacts = () => async dispatch => {\r\n    dispatch(fetchContactsRequest());\r\n\r\n    try {\r\n        const { data } = await axios.get('/contacts');\r\n\r\n        dispatch(fetchContactsSuccess(data))\r\n\r\n    } catch (error) {\r\n        dispatch(fetchContactsError(error))\r\n    }\r\n\r\n    // axios\r\n    //     .get(`/contacts`)\r\n    //     .then(({data}) => dispatch(fetchContactsSuccess(data)))\r\n    //     .catch(error => dispatch(fetchContactsError(error)))\r\n};\r\n\r\nconst addContact = (name, number) => dispatch => {\r\n    const contact = {\r\n        name,\r\n        number,\r\n        // completed: false,\r\n    };\r\n      \r\n    dispatch(addContactRequest());\r\n\r\n    axios\r\n        .post('/contacts', contact)\r\n        .then(({ data }) => dispatch(addContactSuccess(data)))\r\n        .catch(error => dispatch(addContactError(error)))\r\n};\r\n\r\nconst deleteContact = id => dispatch => {\r\n    dispatch(deleteContactRequest());\r\n\r\n    axios\r\n        .delete(`/contacts/${id}`)\r\n        .then(() => dispatch(deleteContactSuccess(id)))\r\n        .catch(error => dispatch(deleteContactError(error)))\r\n};\r\n\r\nexport default {addContact, deleteContact, fetchContacts}","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport contactsOperations from '../../redux/contacts/contacts-operations'\nimport contactsSelectors from \"../../redux/contacts/contacts-selectors\";\nimport \"./contacts-list.css\";\n\nconst ContactsList = ({ filteredContacts, onDeleteContact }) => (\n  console.log('re-render') || \n  <ul className=\"contact-list\">\n    {filteredContacts.map(({ name, number, id }) => (\n      <li key={id} className=\"contact-item\">\n        <span className=\"contact-name\">{name} : </span>\n        <span className=\"contact-number\"> {number}</span>\n        <button\n          className=\"button contact-item__button\"\n          onClick={() => onDeleteContact(id)}\n        >\n          Удалить\n        </button>\n      </li>\n    ))}\n  </ul>\n);\n\n// const getFilteredContacts = (allContacts, filter) => {\n  \n//   // const { filter, contacts } = this.state;\n\n//   const normalizedFilter = filter.toLowerCase();\n\n//   return allContacts.filter((contact) =>\n//     contact.name.toLowerCase().includes(normalizedFilter)\n//   );\n// };\n\nconst mapStateToProps = (state) => ({\n  filteredContacts: contactsSelectors.getFilteredContacts(state),\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  onDeleteContact: (id) => dispatch(contactsOperations.deleteContact(id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactsList);","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport contactsOperations from \"../../redux/contacts/contacts-operations\";\nimport \"../base.css\";\nimport \"../Contact-form/contact-form.css\";\n\nclass ContactForm extends Component {\n  state = {\n    name: \"\",\n    number: \"\",\n  };\n\n  componentDidMount() {\n    this.props.fetchContacts()\n  }\n\n  handleChange = ({ target }) => {\n    const { name, value } = target;\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  handleSubmit = (evt) => {\n    evt.preventDefault();\n\n    const { name, number } = this.state;\n \n    this.props.onSubmit(name, number);\n   \n    this.reset();\n  };\n\n  reset = () => {\n    this.setState({ name: \"\", number: \"\" });\n  };\n\n  render() {\n    return (\n      <form className=\"contacts-form\" onSubmit={this.handleSubmit}>\n        <label className=\"label\">\n          Name\n          <input\n            className=\"input\"\n            value={this.state.name}\n            onChange={this.handleChange}\n            placeholder=\"Name\"\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\" \"\n            required\n          />\n        </label>\n\n        <label className=\"label\">\n          Number\n          <input\n            className=\"input\"\n            value={this.state.number}\n            onChange={this.handleChange}\n            type=\"tel\"\n            name=\"number\"\n            placeholder=\"Number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n          />\n        </label>\n\n        <button className=\"button add\" type=\"submit\">\n          Add contact\n        </button>\n      </form>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  onSubmit: (name, number) =>\n    dispatch(contactsOperations.addContact(name, number)),\n  fetchContacts: () => dispatch(contactsOperations.fetchContacts())\n});\n\nexport default connect(null, mapDispatchToProps)(ContactForm);\n","import Filter from \"./components/Filter\";\nimport ContactsList from \"./components/Contacts/Contacts-list\";\nimport ContactForm from \"./components/Contact-form/Contact-form\";\n\nconst App = () => (\n  <>\n    <h1>Phonebook</h1>\n    <ContactForm />\n\n    <h2>Contacts</h2>\n    <Filter />\n\n    <ContactsList />\n  </>\n);\n\nexport default App;","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { createReducer } from \"@reduxjs/toolkit\";\nimport { combineReducers } from \"redux\";\nimport {\n    addContactSuccess,\n    deleteContactSuccess,\n    fetchContactsSuccess,\n    changeFilter\n} from './contacts-actions'\n// import actions from \"./contacts-actions\";\n// import types from \"./contacts-types\";\n\n// console.log(actions.addContact.type);\n\nconst items = createReducer(([]), {\n  [fetchContactsSuccess]: (_, {payload}) => payload,\n  [addContactSuccess]: (state, { payload }) => {\n    if (state.map(({ name }) => name).includes(payload.name)) {\n      alert(`${payload.name} is already in contacts`);\n      // console.log(payload.name);\n      return \n    } \n      return [payload, ...state];\n    \n  },\n\n  [deleteContactSuccess]: (state, { payload }) =>\n    state.filter(({ id }) => id !== payload),\n});\n\nconst filter = createReducer(\"\", {\n  [changeFilter]: (_, { payload }) => payload,\n});\n\nconst error = createReducer(null, {})\n\nexport default combineReducers({\n  items,\n  filter,\n  error\n});\n","import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\nimport logger from \"redux-logger\";\nimport {\n  // persistStore,\n  // persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from \"redux-persist\";\n// import storage from \"redux-persist/lib/storage\";\nimport contactsReducer from \"./contacts/contacts-reducer\";\n\n// const myMiddleware = store => next => action => {\n//   console.log('My middleware');\n// }\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n logger\n  // myMiddleware\n];\n\n// const persistConfig = {\n//   key: \"contacts\",\n//   storage,\n//   blacklist: [\"filter\"],\n// };\n\nconst store = configureStore({\n  reducer: {\n    contacts: contactsReducer,\n    // contacts: persistReducer(persistConfig, contactsReducer),\n  },\n  middleware,\n  devTools: process.env.NODE_ENV === \"development\",\n});\n\n// const persistor = persistStore(store);\n\nexport default store;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\n// import { PersistGate } from \"redux-persist/integration/react\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      {/* <PersistGate loading={null} persistor={store.persistor}> */}\n        <App />\n      {/* </PersistGate> */}\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}